# GENERAL LOGS
#logging.level.org.springframework=DEBUG

# DATABASE
# Specify database name, useful when login to the H2 Console
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE

# -----------------------
# DataBase Initialization
# -----------------------
# SpringBoot can create the schema and populate it.
# It loads the SQL from `schema.sql` and `data.sql` respectively.
# See: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.data-initialization
#
# Initialise the database using JPA/Hibernate
#   Schema created automatically according to model (@Entity classes).
#   If enabled, `schema.sql` and `data.sql` will be ignored.
#     * `import.sql` can be used to populate tables instead of `data.sql`.
#   If disabled, `schema.sql` and `data.sql` will be executed.
#     * NOTE: Columns of type INTEGER will be created to map `enum` entity attributes (i.e. Ingredient type)
#             See solutions in: https://www.baeldung.com/jpa-persisting-enums-in-jpa
# JPA:
#   `spring.jpa.generate-ddl` (boolean, defaults to `false`)
# Hibernate (more fine grained control):
#   `spring.jpa.hibernate.ddl-auto` values [none|validate|update|create|create-drop]
#   Defaults to `create-drop` when using an embedded database and no schema manager was detected,
#   otherwise, defaults to `none`.
#
#spring.jpa.hibernate.ddl-auto=none


# ---------------------
# Logging JPA Queries
# ---------------------
#
# 1. Standard output (simple, but doesn't log parameters)
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#
# 2. Via loggers (logs parameters)
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
